//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include "keys_fr_swiss.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
            &kp Q       &kp W       &kp F        &kp P        &kp G        &kp J      &kp L          &kp U        &kp Y       &kp FR_E_GRAVE
            &mt LGUI A  &mt LALT R  &mt LCTRL S  &mt LSHFT T  &kp D        &kp H      &mt RSHFT N    &mt RCTRL E  &mt RALT I  &mt RGUI O
&bt BT_CLR  &kp Z       &kp X       &kp C        &kp V        &kp B        &kp K      &kp M          &kp COMMA    &kp DOT     &kp FR_E_ACUTE  &kp FR_A_GRAVE
                                    &mo 1        &kp SPACE    &kp ENTER    &kp MINUS  &kp BACKSPACE  &mo 2
            >;
        };

        lower_layer {
            label = "LOWER";
            bindings = <
        &kp ESC  &kp N7       &kp N8        &kp N9         &kp FR_SINGLE_QUOTE         &kp FR_LEFT_BRACE            &kp FR_RIGHT_BRACE                   &kp LS(FR_QUESTION)       &kp FR_ASTERISK        &kp FR_LESS_THAN
        &kp E    &mt LALT N4  &mt LCTRL N5  &mt LSHIFT N6  &kp LS(FR_DOUBLE_QUOTES)    &kp LS(FR_LEFT_PARENTHESIS)  &mt RSHIFT LS(FR_RIGHT_PARENTHESIS)  &mt LCTRL FR_EXCLAMATION  &mt RALT LS(FR_SLASH)  &mt RIGHT_GUI LS(FR_EQUAL)
&trans  &kp N0   &kp N1       &kp N2        &kp N3         &kp FR_CARET                &kp RA(FR_LEFT_BRACKET)      &kp RA(FR_RIGHT_BRACKET)             &trans                    &kp LS(FR_PLUS)        &kp FR_GREATER_THAN         &kp FR_PLUS
                              &trans        &trans         &trans                      &trans                       &trans                               &trans
            >;
        };

        raise_layer {
            label = "RAISE";
            bindings = <
               &kp FR_UMLAUT      &kp FR_POUND           &kp FR_AT_SIGN      &kp FR_DOLLAR        &kp PRCNT       &kp CARET     &kp AMPS        &kp RA(U)   &kp SQT     &kp DQT
               &mt LGUI FR_TILDE  &mt LALT FR_BACKSLASH  &mt LCTRL FR_GRAVE  &mt LSHIFT FR_ACUTE  &kp FR_CARET    &kp C_MUTE    &kp LS(RA(N4))  &kp RA(N5)  &kp RA(N4)  &kp RA(O)
&kp FR_DEGREE  &kp FR_AMPERSAND   &kp RA(FR_PIPE)        &kp FR_C_CEDILLA    &kp FR_PERCENT       &trans          &kp C_VOL_DN  &kp C_VOL_UP    &kp C_PREV  &kp C_NEXT  &kp BSLH   &trans
                                                         &trans              &trans               &trans          &trans        &trans          &trans
            >;
        };

        adjust_layer {
            label = "ADJ";
            bindings = <
        &sys_reset   &bt BT_CLR  &out OUT_TOG  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F12
        &bootloader  &bt BT_NXT  &trans        &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans       &bt BT_PRV  &trans        &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                 &trans        &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cond_adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
