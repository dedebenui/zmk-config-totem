//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

#define CH_SECT GRAVE         // §
#define CH_1    1             // 1
#define CH_2    2             // 2
#define CH_3    3             // 3
#define CH_4    4             // 4
#define CH_5    5             // 5
#define CH_6    6             // 6
#define CH_7    7             // 7
#define CH_8    8             // 8
#define CH_9    9             // 9
#define CH_0    0             // 0
#define CH_QUOT MINUS         // '
#define CH_CIRC EQUALL        // ^ (dead)
#define CH_Q    Q             // Q
#define CH_W    W             // W
#define CH_E    E             // E
#define CH_R    R             // R
#define CH_T    T             // T
#define CH_Z    Y             // Z
#define CH_U    U             // U
#define CH_I    I             // I
#define CH_O    O             // O
#define CH_P    P             // P
#define CH_EGRV LBRC          // è
#define CH_DIAE RBRC          // ¨ (dead)
#define CH_A    A             // A
#define CH_S    S             // S
#define CH_D    D             // D
#define CH_F    F             // F
#define CH_G    G             // G
#define CH_H    H             // H
#define CH_J    J             // J
#define CH_K    K             // K
#define CH_L    L             // L
#define CH_EACU SEMI          // é
#define CH_AGRV SQT           // à
#define CH_DLR  NUHS          // $
#define CH_LABK NUBS          // <
#define CH_Y    Z             // Y
#define CH_X    X             // X
#define CH_C    C             // C
#define CH_V    V             // V
#define CH_B    B             // B
#define CH_N    N             // N
#define CH_M    M             // M
#define CH_COMM COMMA         // ,
#define CH_DOT  DOT           // .
#define CH_MINS SLASH         // -
#define CH_DEG  S(CH_SECT)    // °
#define CH_PLUS S(CH_1)       // +
#define CH_DQUO S(CH_2)       // "
#define CH_ASTR S(CH_3)       // *
#define CH_CCED S(CH_4)       // ç
#define CH_PERC S(CH_5)       // %
#define CH_AMPR S(CH_6)       // &
#define CH_SLSH S(CH_7)       // /
#define CH_LPRN S(CH_8)       // (
#define CH_RPRN S(CH_9)       // )
#define CH_EQL  S(CH_0)       // =
#define CH_QUES S(CH_QUOT)    // ?
#define CH_GRV  S(CH_CIRC)    // ` (dead)
#define CH_UDIA S(CH_EGRV)    // ü
#define CH_EXLM S(CH_DIAE)    // !
#define CH_ODIA S(CH_EACU)    // ö
#define CH_ADIA S(CH_AGRV)    // ä
#define CH_PND  S(CH_DLR)     // £
#define CH_RABK S(CH_LABK)    // >
#define CH_SCLN S(CH_COMM)    // ;
#define CH_COLN S(CH_DOT)     // :
#define CH_UNDS S(CH_MINS)    // _
#define CH_BRKP ALGR(CH_1)    // ¦
#define CH_AT   ALGR(CH_2)    // @
#define CH_HASH ALGR(CH_3)    // #
#define CH_NOT  ALGR(CH_6)    // ¬
#define CH_PIPE ALGR(CH_7)    // |
#define CH_CENT ALGR(CH_8)    // ¢
#define CH_ACUT ALGR(CH_QUOT) // ´ (dead)
#define CH_TILD ALGR(CH_CIRC) // ~ (dead)
#define CH_EURO ALGR(CH_E)    // €
#define CH_LBRC ALGR(CH_EGRV) // [
#define CH_RBRC ALGR(CH_DIAE) // ]
#define CH_LCBR ALGR(CH_AGRV) // {
#define CH_RCBR ALGR(CH_DLR)  // }
#define CH_BSLS ALGR(CH_LABK) // (backslash)


&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";
        base_layer {
            label = "BASE";
            bindings = <
//              ┌────────────┬────────────┬─────────────┬─────────────┬───────────┐                           ┌───────────────┬─────────────┬─────────────┬────────────┬──────────────────┐                   
//              │   &kp Q    │   &kp W    │    &kp F    │    &kp P    │   &kp G   │                           │     &kp J     │    &kp L    │    &kp U    │   &kp Y    │ &kp LEFT_BRACKET │                   
//              ├────────────┼────────────┼─────────────┼─────────────┼───────────┤                           ├───────────────┼─────────────┼─────────────┼────────────┼──────────────────┤                   
//              │ &mt LGUI A │ &mt LALT R │ &mt LCTRL S │ &mt LSHFT T │   &kp D   │                           │     &kp H     │ &mt RSHFT N │ &mt RCTRL E │ &mt RALT I │    &mt RGUI O    │                   
//    ┌─────────┼────────────┼────────────┼─────────────┼─────────────┼───────────┤                           ├───────────────┼─────────────┼─────────────┼────────────┼──────────────────┼──────────────────┐
//    │ &kp TAB │   &kp Z    │   &kp X    │    &kp C    │    &kp V    │   &kp B   │                           │     &kp K     │    &kp M    │  &kp COMMA  │  &kp DOT   │  &kp SEMICOLON   │ &kp SINGLE_QUOTE │
//    └─────────┴────────────┴────────────┴─────────────┼─────────────┼───────────┼───────────┐   ┌───────────┼───────────────┼─────────────┼─────────────┴────────────┴──────────────────┴──────────────────┘
//                                                      │    &mo 1    │ &kp SPACE │ &kp ENTER │   │ &kp MINUS │ &kp BACKSPACE │    &mo 2    │                                                                 
//                                                      └─────────────┴───────────┴───────────┘   └───────────┴───────────────┴─────────────┘                                                                 
            &kp Q        &kp W        &kp F         &kp P         &kp G                                   &kp J           &kp L         &kp U         &kp Y        &kp LEFT_BRACKET                   
            &mt LGUI A   &mt LALT R   &mt LCTRL S   &mt LSHFT T   &kp D                                   &kp H           &mt RSHFT N   &mt RCTRL E   &mt RALT I   &mt RGUI O                         
  &kp TAB   &kp Z        &kp X        &kp C         &kp V         &kp B                                   &kp K           &kp M         &kp COMMA     &kp DOT      &kp SEMICOLON      &kp SINGLE_QUOTE
                                                    &mo 1         &kp SPACE   &kp ENTER       &kp MINUS   &kp BACKSPACE   &mo 2                                                                       
            >;
        };
        lower_layer {
            label = "LOWER";
            bindings = <
//             ┌─────────┬─────────────┬──────────────┬───────────────┬────────────┐                     ┌──────────────────────┬───────────────────────┬───────────────────────┬─────────────────┬──────────────────────┐         
//             │ &kp ESC │   &kp N7    │    &kp N8    │    &kp N9     │ &kp MINUS  │                     │ &kp RA(SINGLE_QUOTE) │   &kp RA(BACKSLASH)   │ &kp LS(RIGHT_BRACKET) │   &kp LS(N3)    │    &kp LESS_THAN     │         
//             ├─────────┼─────────────┼──────────────┼───────────────┼────────────┤                     ├──────────────────────┼───────────────────────┼───────────────────────┼─────────────────┼──────────────────────┤         
//             │  &kp E  │ &mt LALT N4 │ &mt LCTRL N5 │ &mt LSHIFT N6 │ &kp LS(N2) │                     │      &kp LS(N8)      │   &mt RSHIFT LS(N9)   │  &mt LCTRL LS(MINUS)  │ &mt RALT LS(N7) │ &mt RIGHT_GUI LS(N0) │         
//    ┌────────┼─────────┼─────────────┼──────────────┼───────────────┼────────────┤                     ├──────────────────────┼───────────────────────┼───────────────────────┼─────────────────┼──────────────────────┼────────┐
//    │ &trans │ &kp N0  │   &kp N1    │    &kp N2    │    &kp N3     │  &kp LPAR  │                     │ &kp RA(LEFT_BRACKET) │ &kp RA(RIGHT_BRACKET) │     &kp BACKSLASH     │   &kp LS(N1)    │   &kp GREATER_THAN   │ &trans │
//    └────────┴─────────┴─────────────┴──────────────┼───────────────┼────────────┼────────┐   ┌────────┼──────────────────────┼───────────────────────┼───────────────────────┴─────────────────┴──────────────────────┴────────┘
//                                                    │    &trans     │   &trans   │ &trans │   │ &trans │        &trans        │        &trans         │                                                                          
//                                                    └───────────────┴────────────┴────────┘   └────────┴──────────────────────┴───────────────────────┘                                                                          
           &kp ESC   &kp N7        &kp N8         &kp N9          &kp MINUS                          &kp RA(SINGLE_QUOTE)   &kp RA(BACKSLASH)       &kp LS(RIGHT_BRACKET)   &kp LS(N3)        &kp LESS_THAN                
           &kp E     &mt LALT N4   &mt LCTRL N5   &mt LSHIFT N6   &kp LS(N2)                         &kp LS(N8)             &mt RSHIFT LS(N9)       &mt LCTRL LS(MINUS)     &mt RALT LS(N7)   &mt RIGHT_GUI LS(N0)         
  &trans   &kp N0    &kp N1        &kp N2         &kp N3          &kp LPAR                           &kp RA(LEFT_BRACKET)   &kp RA(RIGHT_BRACKET)   &kp BACKSLASH           &kp LS(N1)        &kp GREATER_THAN       &trans
                                                  &trans          &trans       &trans       &trans   &trans                 &trans                                                                                         
            >;
        };

        raise_layer {
            label = "RAISE";
            bindings = <
//             ┌─────────────┬─────────────┬───────────┬──────────┬───────────┐                    ┌──────────────┬────────────────┬────────────┬────────────┬───────────┐         
//             │  &kp EXCL   │   &kp AT    │ &kp HASH  │ &kp DLLR │ &kp PRCNT │                    │  &kp CARET   │    &kp AMPS    │ &kp RA(U)  │  &kp SQT   │  &kp DQT  │         
//             ├─────────────┼─────────────┼───────────┼──────────┼───────────┤                    ├──────────────┼────────────────┼────────────┼────────────┼───────────┤         
//             │  &kp RA(A)  │   &trans    │ &kp RA(S) │  &trans  │  &trans   │                    │  &kp C_MUTE  │ &kp LS(RA(N4)) │ &kp RA(N5) │ &kp RA(N4) │ &kp RA(O) │         
//    ┌────────┼─────────────┼─────────────┼───────────┼──────────┼───────────┤                    ├──────────────┼────────────────┼────────────┼────────────┼───────────┼────────┐
//    │ &trans │ &kp RA(F18) │ &kp RA(F19) │  &trans   │  &trans  │  &trans   │                    │ &kp C_VOL_DN │  &kp C_VOL_UP  │ &kp C_PREV │ &kp C_NEXT │ &kp BSLH  │ &trans │
//    └────────┴─────────────┴─────────────┴───────────┼──────────┼───────────┼───────┐   ┌────────┼──────────────┼────────────────┼────────────┴────────────┴───────────┴────────┘
//                                                     │  &trans  │  &trans   │ &mo 3 │   │ &trans │   &kp C_PP   │     &trans     │                                               
//                                                     └──────────┴───────────┴───────┘   └────────┴──────────────┴────────────────┘                                               
           &kp EXCL      &kp AT        &kp HASH    &kp DLLR   &kp PRCNT                        &kp CARET      &kp AMPS         &kp RA(U)    &kp SQT      &kp DQT           
           &kp RA(A)     &trans        &kp RA(S)   &trans     &trans                           &kp C_MUTE     &kp LS(RA(N4))   &kp RA(N5)   &kp RA(N4)   &kp RA(O)         
  &trans   &kp RA(F18)   &kp RA(F19)   &trans      &trans     &trans                           &kp C_VOL_DN   &kp C_VOL_UP     &kp C_PREV   &kp C_NEXT   &kp BSLH    &trans
                                                   &trans     &trans      &mo 3       &trans   &kp C_PP       &trans                                                       
            >;
        };
        adjust_layer {
            label = "ADJ";
            bindings = <
//             ┌─────────────┬────────────┬──────────────┬────────┬────────┐                     ┌────────┬────────┬────────┬────────┬─────────┐         
//             │ &sys_reset  │ &bt BT_CLR │ &out OUT_TOG │ &trans │ &trans │                     │ &trans │ &kp F7 │ &kp F8 │ &kp F9 │ &kp F12 │         
//             ├─────────────┼────────────┼──────────────┼────────┼────────┤                     ├────────┼────────┼────────┼────────┼─────────┤         
//             │ &bootloader │ &bt BT_NXT │    &trans    │ &trans │ &trans │                     │ &trans │ &kp F4 │ &kp F5 │ &kp F6 │ &kp F11 │         
//    ┌────────┼─────────────┼────────────┼──────────────┼────────┼────────┤                     ├────────┼────────┼────────┼────────┼─────────┼────────┐
//    │ &trans │   &trans    │ &bt BT_PRV │    &trans    │ &trans │ &trans │                     │ &trans │ &kp F1 │ &kp F2 │ &kp F3 │ &kp F10 │ &trans │
//    └────────┴─────────────┴────────────┴──────────────┼────────┼────────┼────────┐   ┌────────┼────────┼────────┼────────┴────────┴─────────┴────────┘
//                                                       │ &trans │ &trans │ &trans │   │ &trans │ &trans │ &trans │                                     
//                                                       └────────┴────────┴────────┘   └────────┴────────┴────────┘                                     
           &sys_reset    &bt BT_CLR   &out OUT_TOG   &trans   &trans                         &trans   &kp F7   &kp F8   &kp F9   &kp F12         
           &bootloader   &bt BT_NXT   &trans         &trans   &trans                         &trans   &kp F4   &kp F5   &kp F6   &kp F11         
  &trans   &trans        &bt BT_PRV   &trans         &trans   &trans                         &trans   &kp F1   &kp F2   &kp F3   &kp F10   &trans
                                                     &trans   &trans   &trans       &trans   &trans   &trans                                     
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cond_adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
